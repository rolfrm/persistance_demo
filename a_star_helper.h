// This file is auto generated by table_compiler
typedef struct _a_star_helper{
  char ** column_names;
  char ** column_types;
  u64 count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const u32 * k1, const u32 * k2);
  const u64 sizes[4];

  u32 * node;
  f32 * expt;
  f32 * traveled;
  u32 * prev;
  mem_area * node_area;
  mem_area * expt_area;
  mem_area * traveled_area;
  mem_area * prev_area;
}a_star_helper;

a_star_helper * a_star_helper_create(const char * optional_name);
void a_star_helper_set(a_star_helper * table, u32 node, f32 expt, f32 traveled, u32 prev);
void a_star_helper_insert(a_star_helper * table, u32 * node, f32 * expt, f32 * traveled, u32 * prev, u64 count);
void a_star_helper_lookup(a_star_helper * table, u32 * keys, u64 * out_indexes, u64 count);
void a_star_helper_remove(a_star_helper * table, u32 * keys, u64 key_count);
void a_star_helper_clear(a_star_helper * table);
void a_star_helper_unset(a_star_helper * table, u32 key);
bool a_star_helper_try_get(a_star_helper * table, u32 * node, f32 * expt, f32 * traveled, u32 * prev);
void a_star_helper_print(a_star_helper * table);
u64 a_star_helper_iter(a_star_helper * table, u32 * keys, size_t keycnt, u32 * optional_keys_out, u64 * indexes, u64 cnt, u64 * iterator);
