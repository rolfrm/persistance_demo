// This file is auto generated by table_compiler
typedef struct _node_action_table{
  char ** column_names;
  char ** column_types;
  u64 count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const u32 * k1, const u32 * k2);
  const u64 sizes[2];

  u32 * id;
  ui_node_action * action;
  mem_area * id_area;
  mem_area * action_area;
}node_action_table;

node_action_table * node_action_table_create(const char * optional_name);
void node_action_table_set(node_action_table * table, u32 id, ui_node_action action);
void node_action_table_insert(node_action_table * table, u32 * id, ui_node_action * action, u64 count);
void node_action_table_lookup(node_action_table * table, u32 * keys, u64 * out_indexes, u64 count);
void node_action_table_remove(node_action_table * table, u32 * keys, u64 key_count);
void node_action_table_get_refs(node_action_table * table, u32 * keys, u64 ** indexes, u64 count);
void node_action_table_clear(node_action_table * table);
void node_action_table_unset(node_action_table * table, u32 key);
bool node_action_table_try_get(node_action_table * table, u32 * id, ui_node_action * action);
void node_action_table_print(node_action_table * table);
u64 node_action_table_iter(node_action_table * table, u32 * keys, size_t keycnt, u32 * optional_keys_out, u64 * indexes, u64 cnt, u64 * iterator);
