// This file is auto generated by table_compiler
typedef struct _u32_to_sequence{
  char ** column_names;
  char ** column_types;
  u64 count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const u32 * k1, const u32 * k2);
  const u64 sizes[2];

  u32 * key;
  index_table_sequence * sequence;
  mem_area * key_area;
  mem_area * sequence_area;
}u32_to_sequence;

u32_to_sequence * u32_to_sequence_create(const char * optional_name);
void u32_to_sequence_set(u32_to_sequence * table, u32 key, index_table_sequence sequence);
void u32_to_sequence_insert(u32_to_sequence * table, u32 * key, index_table_sequence * sequence, u64 count);
void u32_to_sequence_lookup(u32_to_sequence * table, u32 * keys, u64 * out_indexes, u64 count);
void u32_to_sequence_remove(u32_to_sequence * table, u32 * keys, u64 key_count);
void u32_to_sequence_clear(u32_to_sequence * table);
void u32_to_sequence_unset(u32_to_sequence * table, u32 key);
bool u32_to_sequence_try_get(u32_to_sequence * table, u32 * key, index_table_sequence * sequence);
void u32_to_sequence_print(u32_to_sequence * table);
u64 u32_to_sequence_iter(u32_to_sequence * table, u32 * keys, size_t keycnt, u32 * optional_keys_out, u64 * indexes, u64 cnt, u64 * iterator);
