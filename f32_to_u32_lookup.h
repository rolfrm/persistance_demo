// This file is auto generated by table_compiler
typedef struct _f32_to_u32_lookup{
  char ** column_names;
  char ** column_types;
  u64 count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const f32 * k1, const f32 * k2);
  const u64 sizes[2];

  f32 * key;
  u32 * value;
  mem_area * key_area;
  mem_area * value_area;
}f32_to_u32_lookup;

f32_to_u32_lookup * f32_to_u32_lookup_create(const char * optional_name);
void f32_to_u32_lookup_set(f32_to_u32_lookup * table, f32 key, u32 value);
void f32_to_u32_lookup_insert(f32_to_u32_lookup * table, f32 * key, u32 * value, u64 count);
void f32_to_u32_lookup_lookup(f32_to_u32_lookup * table, f32 * keys, u64 * out_indexes, u64 count);
void f32_to_u32_lookup_remove(f32_to_u32_lookup * table, f32 * keys, u64 key_count);
void f32_to_u32_lookup_clear(f32_to_u32_lookup * table);
void f32_to_u32_lookup_unset(f32_to_u32_lookup * table, f32 key);
bool f32_to_u32_lookup_try_get(f32_to_u32_lookup * table, f32 * key, u32 * value);
void f32_to_u32_lookup_print(f32_to_u32_lookup * table);
u64 f32_to_u32_lookup_iter(f32_to_u32_lookup * table, f32 * keys, size_t keycnt, f32 * optional_keys_out, u64 * indexes, u64 cnt, u64 * iterator);
